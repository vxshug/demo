package site.shug.spring.common;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.jdbc.core.convert.*;
import org.springframework.data.jdbc.core.mapping.JdbcMappingContext;
import org.springframework.data.jdbc.repository.config.EnableJdbcRepositories;
import org.springframework.data.relational.core.dialect.Dialect;
import org.springframework.data.relational.core.dialect.HsqlDbDialect;
import org.springframework.data.relational.core.mapping.RelationalMappingContext;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
import org.springframework.transaction.TransactionManager;

import javax.sql.DataSource;

@Configuration
@ComponentScan(basePackages = "site.shug.spring.common")
@EnableJdbcRepositories(basePackages = "site.shug.spring.common") // 开启从Repository的接口创建实现
public class JdbcConfig {


    @Bean
    DataSource dataSource() {
        EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder();
        return builder.setType(EmbeddedDatabaseType.HSQL).build();
    }

    @Bean
    public JdbcTemplate jdbcTemplate(DataSource dataSource) {
        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
        String createTableSql = "CREATE TABLE USER (" +
                "ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY, " +
                "AGE INT, " +
                "NICKNAME VARCHAR(100), " +
                "NAME VARCHAR(100)) ";
        jdbcTemplate.execute(createTableSql);
        return jdbcTemplate;
    }

    @Bean
    NamedParameterJdbcOperations namedParameterJdbcOperations(DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

    @Bean
    TransactionManager transactionManager(DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }

    @Bean
    JdbcMappingContext mappingContext() {
        return new JdbcMappingContext();
    }

    @Bean
    Dialect dialect() {
        return HsqlDbDialect.INSTANCE;
    }

    @Bean
    SqlGeneratorSource sqlGeneratorSource(RelationalMappingContext context, JdbcConverter converter, Dialect dialect) {
        return new SqlGeneratorSource(context, converter, dialect);
    }

    @Bean
    SqlParametersFactory sqlParametersFactory(RelationalMappingContext context, JdbcConverter converter) {
        return new SqlParametersFactory(context, converter);
    }

    @Bean
    InsertStrategyFactory insertStrategyFactory(NamedParameterJdbcOperations jdbcOperations, Dialect dialect) {
        return new InsertStrategyFactory(jdbcOperations, dialect);
    }

    @Bean
    RelationResolver relationResolver(SqlGeneratorSource sqlGeneratorSource, RelationalMappingContext context,
                                      JdbcConverter converter, NamedParameterJdbcOperations operations, SqlParametersFactory sqlParametersFactory,
                                      InsertStrategyFactory insertStrategyFactory) {
        return new DefaultDataAccessStrategy(sqlGeneratorSource, context, converter, operations, sqlParametersFactory, insertStrategyFactory);
    }
    @Bean
    JdbcConverter jdbcConverter(RelationalMappingContext context, @Lazy RelationResolver relationResolver) {
        MappingJdbcConverter converter = new MappingJdbcConverter(context, relationResolver);
        return new MappingJdbcConverter(context, relationResolver);
    }
}
